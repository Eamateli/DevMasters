{
    "collectionName": "python",
    "title": "Python",
    "icon": "",
    "color": "3776AB",
    "highlighter": "python",
    "groups": [
        {
            "id": "language_basics",
            "title": "Language Basics",
            "docs": [
                {
                    "id": "what_is_python",
                    "title": "What is Python?",
                    "description": "Python is a high-level, interpreted programming language known for its readability and simplicity. It supports multiple programming paradigms and is widely used in web development, data science, artificial intelligence, and more. Python 2 vs. Python 3, and the importance of Python in various industries."
                },
                {
                    "id": "variables_and_data_types",
                    "title": "Variables and Data Types",
                    "description": "Python has various data types, including int, float, str, list, tuple, dict, etc. Understanding how to declare and use variables is fundamental. Explaining dynamic typing, type() function, and common data type conversion methods."
                },
                {
                    "id": "variable_declaration",
                    "title": "Variable Declaration",
                    "description": "Examples of variable declarations for different data types.",
                    "code": "# Variable declaration\nname = 'John'\nage = 25\nheight = 5.9\nis_student = False"
                },
                {
                    "id": "dynamic_typing",
                    "title": "Dynamic Typing",
                    "description": "The type of a variable is determined at runtime. Showing an example of changing the type of a variable.",
                    "code": "# Dynamic typing\nname = 42  # Valid, name can now hold an integer"
                },
                {
                    "id": "type_function",
                    "title": "Type Function",
                    "description": "Using the type() function to determine the data type of a variable. Illustrating how to check the type of a variable.",
                    "code": "# Type function\nprint(type(name))  # Output: <class 'int'>"
                },
                {
                    "id": "data_type_conversion",
                    "title": "Data Type Conversion",
                    "description": "Common methods for converting data types in Python. Examples of converting between int, float, and str.",
                    "code": "# Common data type conversions\nfloat_age = float(age)\nstr_height = str(height)\nint_string = int('123')"
                },
                {
                    "id": "for_loop",
                    "title": "For Loop",
                    "description": "Iterates through elements in an iterable using the Python for loop.",
                    "code": "\n# Syntax\nfor variable in iterable:\n    # Code block\n\n# Example\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n"
                },
                {
                    "id": "while_loop",
                    "title": "While Loop",
                    "description": "Executes a code block repeatedly as long as a specified condition is true with the Python while loop.",
                    "code": "\n# Syntax\nwhile condition:\n    # Code block\n\n# Example\ncount = 0\nwhile count < 5:\n    print(count)\n    count += 1\n"
                },
                {
                    "id": "ternary_operator",
                    "title": "Ternary Operator",
                    "description": "Provides a concise way to express conditional statements in Python.",
                    "code": "\n# Syntax\nresult = value_if_true if condition else value_if_false\n\n# Example\nx = 10\ny = 20\nmax_value = x if x > y else y\n"
                },
                {
                    "id": "range_function",
                    "title": "range() Function",
                    "description": "Generates a sequence of numbers in a specified range with optional start, stop, and step parameters.",
                    "code": "\n# Syntax\nrange(start, stop, step)\n\n# Example\nfor i in range(1, 6, 2):\n    print(i)\n# Output: 1, 3, 5\n"
                },
                {
                    "id": "enumerate",
                    "title": "Enumerate",
                    "description": "Pairs each element in an iterable with its corresponding index using the Python enumerate() function.",
                    "code": "\n# Syntax\nfor index, value in enumerate(iterable):\n    # Code block\n\n# Example\nfruits = ['apple', 'banana', 'orange']\nfor index, fruit in enumerate(fruits):\n    print(f'Index: {index}, Value: {fruit}')\n"
                },                                                                
                {
                    "id": "functions",
                    "title": "Functions",
                    "description": "Encapsulates a block of code with a specific purpose, allowing for code reuse and organization in Python.",
                    "code": "\n# Syntax\n# Defining a function\n# Example\n# Calling a function\n"
                },
                {
                    "id": "lambda_functions",
                    "title": "Lambda Functions",
                    "description": "Creates anonymous functions using the lambda keyword for short-lived operations in Python.",
                    "code": "\n# Syntax\nlambda arguments: expression\n\n# Example\nsquare = lambda x: x**2\nresult = square(4)\n# Output: 16\n"
                },
                {
                    "id": "default_arguments",
                    "title": "Default Arguments",
                    "description": "Assigns default values to function parameters, allowing for optional arguments in Python.",
                    "code": "\n# Syntax\ndef greet(name, greeting='Hello'):\n    # Code block\n\n# Example\ngreet('John')\n# Output: Hello, John!\n"
                },                                                
                {
                    "id": "try_except",
                    "title": "Try-Except Block",
                    "description": "Catches and handles exceptions in Python, preventing program crashes due to errors.",
                    "code": "\n# Syntax\ntry:\n    # Code block with potential error\nexcept ExceptionType as e:\n    # Code block to handle the exception\n"
                },
                {
                    "id": "finally_block",
                    "title": "Finally Block",
                    "description": "Defines a block of code that will be executed regardless of whether an exception occurs or not in Python.",
                    "code": "\n# Syntax\ntry:\n    # Code block with potential error\nexcept ExceptionType as e:\n    # Code block to handle the exception\nfinally:\n    # Code block to execute always\n"
                },
                {
                    "id": "custom_exceptions",
                    "title": "Custom Exceptions",
                    "description": "Creates user-defined exception classes to handle specific error conditions in Python.",
                    "code": "\n# Syntax\nclass CustomError(Exception):\n    # Code block\n\n# Example\nraise CustomError('This is a custom error')\n"
                },
                {
                    "id": "except_else",
                    "title": "Except-Else Block",
                    "description": "Executes a block of code if no exceptions are raised in the try block in Python.",
                    "code": "\n# Syntax\ntry:\n    # Code block with potential error\nexcept ExceptionType as e:\n    # Code block to handle the exception\nelse:\n    # Code block to execute if no exception\n"
                },                
                {
                    "id": "except_multiple_exceptions",
                    "title": "Handling Multiple Exceptions",
                    "description": "Catches and handles multiple types of exceptions in a single except block in Python.",
                    "code": "\n# Syntax\ntry:\n    # Code block with potential error\nexcept (ExceptionType1, ExceptionType2) as e:\n    # Code block to handle the exceptions\n"
                }
            ]
        },
        {
            "id": "data_structures",
            "title": "Data Structures",
            "docs": [
                {
                    "id": "lists",
                    "title": "Lists",
                    "description": "Stores ordered and mutable collections of items in Python, allowing for dynamic data manipulation.",
                    "code": "\n# Syntax\nmy_list = [item1, item2, item3]\n\n# Example\nnumbers = [1, 2, 3, 4, 5]\nprint(numbers)\n# Output: [1, 2, 3, 4, 5]\n"
                },
                {
                    "id": "list_comprehensions",
                    "title": "List Comprehensions",
                    "description": "Creates concise lists using a single line of code, providing a readable and efficient way to generate lists in Python.",
                    "code": "\n# Syntax\nnew_list = [expression for item in iterable if condition]\n\n# Example\nsquares = [x**2 for x in range(1, 6)]\nprint(squares)\n# Output: [1, 4, 9, 16, 25]\n"
                },
                {
                    "id": "tuples",
                    "title": "Tuples",
                    "description": "Represents ordered and immutable collections of items in Python, providing data integrity and security.",
                    "code": "\n# Syntax\nmy_tuple = (item1, item2, item3)\n\n# Example\ncolors = ('red', 'green', 'blue')\nprint(colors)\n# Output: ('red', 'green', 'blue')\n"
                },
                {
                    "id": "tuple_unpacking",
                    "title": "Tuple Unpacking",
                    "description": "Assigns individual elements of a tuple to multiple variables in a single statement, enhancing code readability in Python.",
                    "code": "\n# Syntax\nvariable1, variable2, variable3 = my_tuple\n\n# Example\ncoordinates = (3, 7, 9)\nx, y, z = coordinates\nprint(x, y, z)\n# Output: 3 7 9\n"
                },
                {
                    "id": "nested_lists_tuples",
                    "title": "Nested Lists and Tuples",
                    "description": "Allows the creation of multi-dimensional structures by embedding lists or tuples within one another in Python.",
                    "code": "\n# Syntax\nnested_list = [[item11, item12], [item21, item22]]\nnested_tuple = ((item11, item12), (item21, item22))\n\n# Example\nmatrix = [[1, 2], [3, 4]]\nprint(matrix[0][1])\n# Output: 2\n"
                },                                                                                
                {
                    "id": "dictionaries",
                    "title": "Dictionaries",
                    "description": "Stores unordered and mutable collections of key-value pairs in Python, providing fast data retrieval through unique keys.",
                    "code": "\n# Syntax\nmy_dict = {'key1': value1, 'key2': value2, 'key3': value3}\n\n# Example\nstudent = {'name': 'John', 'age': 25, 'grade': 'A'}\nprint(student)\n# Output: {'name': 'John', 'age': 25, 'grade': 'A'}\n"
                },
                {
                    "id": "dictionary_methods",
                    "title": "Dictionary Methods",
                    "description": "Offers various built-in methods for performing operations on dictionaries, enhancing functionality and ease of use in Python.",
                    "code": "# Dictionary methods: keys(), values(), items(), get(), update(), pop(), popitem(), clear(), etc.\n\n# Creating a sample dictionary\nmy_dict = {'name': 'John', 'age': 25, 'city': 'New York'}\n\n# Using keys() method to get the keys of the dictionary\nkeys = my_dict.keys()\nprint('Keys:', keys)\n\n# Using values() method to get the values of the dictionary\nvalues = my_dict.values()\nprint('Values:', values)\n\n# Using items() method to get key-value pairs of the dictionary\nitems = my_dict.items()\nprint('Items:', items)\n\n# Using get() method to retrieve the value associated with a key\nage = my_dict.get('age')\nprint('Age:', age)\n\n# Using update() method to merge two dictionaries\nadditional_info = {'gender': 'Male', 'occupation': 'Engineer'}\nmy_dict.update(additional_info)\nprint('Updated Dictionary:', my_dict)\n\n# Using pop() method to remove an item by key\nremoved_item = my_dict.pop('city')\nprint('Removed Item:', removed_item)\nprint('Updated Dictionary after pop:', my_dict)\n\n# Using popitem() method to remove and return the last item as a tuple\nlast_item = my_dict.popitem()\nprint('Removed Last Item:', last_item)\nprint('Updated Dictionary after popitem:', my_dict)\n\n# Using clear() method to remove all items from the dictionary\nmy_dict.clear()\nprint('Cleared Dictionary:', my_dict)"
                },                
                {
                    "id": "sets",
                    "title": "Sets",
                    "description": "Stores unordered and unique elements in Python, providing mathematical set operations like union, intersection, and difference.",
                    "code": "\n# Syntax\nmy_set = {element1, element2, element3}\n\n# Example\nfruits = {'apple', 'banana', 'orange'}\nprint(fruits)\n# Output: {'apple', 'banana', 'orange'}\n"
                },
                {
                    "id": "set_methods",
                    "title": "Set Methods",
                    "description": "Offers various built-in methods for performing operations on sets, including adding, removing, and checking for membership in Python.",
                    "code": "# Set methods: add(), remove(), discard(), pop(), clear(), union(), intersection(), difference(), etc.\n\n# Creating two sample sets\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\n# Using add() method to add an element to the set\nset1.add(6)\nprint('After add(6):', set1)\n\n# Using remove() method to remove an element from the set\nset1.remove(3)\nprint('After remove(3):', set1)\n\n# Using discard() method to remove an element, if present, from the set\nset1.discard(2)\nprint('After discard(2):', set1)\n\n# Using pop() method to remove and return an arbitrary element from the set\npopped_element = set1.pop()\nprint('Popped element:', popped_element)\nprint('Set after pop:', set1)\n\n# Using clear() method to remove all elements from the set\nset1.clear()\nprint('Cleared set:', set1)\n\n# Using union() method to get the union of two sets\nunion_set = set2.union({9, 10})\nprint('Union set:', union_set)\n\n# Using intersection() method to get the intersection of two sets\nintersection_set = set2.intersection({4, 5, 6})\nprint('Intersection set:', intersection_set)\n\n# Using difference() method to get the difference between two sets\ndifference_set = set2.difference({6, 7, 8})\nprint('Difference set:', difference_set)"
                },
                {
                    "id": "set_operations",
                    "title": "Set Operations",
                    "description": "Performs mathematical set operations like union, intersection, and difference, allowing for efficient manipulation of sets in Python.",
                    "code": "\n# Syntax\n# Example\nset1 = {1, 2, 3}\nset2 = {3, 4, 5}\nunion_set = set1 | set2\nprint(union_set)\n# Output: {1, 2, 3, 4, 5}\n"
                },
                {
                    "id": "frozensets",
                    "title": "Frozensets",
                    "description": "Represents an immutable version of sets in Python, allowing for use as keys in dictionaries and elements in other sets.",
                    "code": "\n# Syntax\nmy_frozenset = frozenset({element1, element2, element3})\n\n# Example\nfrozen_numbers = frozenset({1, 2, 3})\nprint(frozen_numbers)\n# Output: frozenset({1, 2, 3})\n"
                },                                                                
                {
                    "id": "queues",
                    "title": "Queues",
                    "description": "Implements a first-in, first-out (FIFO) data structure in Python, allowing elements to be added to the back and removed from the front.",
                    "code": "\n# Syntax\nfrom collections import deque\nqueue = deque()\nqueue.append(element)  # Enqueue\nelement = queue.popleft()  # Dequeue\n\n# Example\nfrom collections import deque\nqueue = deque([1, 2, 3])\nqueue.append(4)\nprint(queue.popleft())\n# Output: 1\n"
                },
                {
                    "id": "stacks",
                    "title": "Stacks",
                    "description": "Implements a last-in, first-out (LIFO) data structure in Python, allowing elements to be added to the top and removed from the top.",
                    "code": "\n# Syntax\nstack = []\nstack.append(element)  # Push\nelement = stack.pop()  # Pop\n\n# Example\nstack = [1, 2, 3]\nstack.append(4)\nprint(stack.pop())\n# Output: 4\n"
                },
                {
                    "id": "priority_queues",
                    "title": "Priority Queues",
                    "description": "Implements a queue where elements have associated priorities, ensuring elements with higher priorities are dequeued first in Python.",
                    "code": "\n# Syntax\nfrom queue import PriorityQueue\npriority_queue = PriorityQueue()\npriority_queue.put((priority, element))  # Enqueue\nelement = priority_queue.get()  # Dequeue\n\n# Example\nfrom queue import PriorityQueue\npriority_queue = PriorityQueue()\npriority_queue.put((2, 'Task 1'))\npriority_queue.put((1, 'Task 2'))\nprint(priority_queue.get())\n# Output: (1, 'Task 2')\n"
                },
                {
                    "id": "lifo_queues",
                    "title": "LIFO Queues",
                    "description": "Implements a last-in, first-out (LIFO) queue in Python, providing a more convenient interface than the regular queue.",
                    "code": "\n# Syntax\nfrom queue import LifoQueue\nlifo_queue = LifoQueue()\nlifo_queue.put(element)  # Push\nelement = lifo_queue.get()  # Pop\n\n# Example\nfrom queue import LifoQueue\nlifo_queue = LifoQueue()\nlifo_queue.put(1)\nlifo_queue.put(2)\nprint(lifo_queue.get())\n# Output: 2\n"
                },                                                                
                {
                    "id": "linked_lists",
                    "title": "Linked Lists",
                    "description": "Implements a data structure where elements are stored in nodes, and each node points to the next node, forming a sequence in Python.",
                    "code": "\nclass Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n\n# Example\nnode1 = Node(1)\nnode2 = Node(2)\nnode1.next = node2\n"
                },
                {
                    "id": "singly_linked_lists",
                    "title": "Singly Linked Lists",
                    "description": "Represents a linked list where each node points to the next node, allowing for efficient traversal in one direction in Python.",
                    "code": "\n# Singly Linked List operations: insert, delete, search, traverse, etc.\n\nclass Node:\n    def __init__(self, data=None, next_node=None):\n        self.data = data\n        self.next_node = next_node\n\n# Example usage\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\nnode1.next_node = node2\nnode2.next_node = node3\n"
                },
                {
                    "id": "doubly_linked_lists",
                    "title": "Doubly Linked Lists",
                    "description": "Enhances a linked list by each node pointing to both the next and previous nodes, facilitating bidirectional traversal in Python.",
                    "code": "\n# Example\n# Doubly Linked List operations: insert, delete, search, traverse, etc.\n\nclass Node:\n    def __init__(self, data=None, next_node=None, prev_node=None):\n        self.data = data\n        self.next_node = next_node\n        self.prev_node = prev_node\n\n# Example usage\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\nnode1.next_node = node2\nnode2.next_node = node3\nnode2.prev_node = node1\nnode3.prev_node = node2\n"
                },
                {
                    "id": "circular_linked_lists",
                    "title": "Circular Linked Lists",
                    "description": "Forms a closed loop by having the last node point to the first node, allowing for continuous traversal in Python.",
                    "code": "\n# Circular Linked List operations: insert, delete, search, traverse, etc.\n\nclass Node:\n    def __init__(self, data=None, next_node=None):\n        self.data = data\n        self.next_node = next_node\n\n# Example usage\nnode1 = Node(1)\nnode2 = Node(2)\nnode3 = Node(3)\n\nnode1.next_node = node2\nnode2.next_node = node3\nnode3.next_node = node1\n"
                }                                                                                                                
            ]
        },
        {
            "id": "classes_and_oop",
            "title": "Classes and Object-Oriented Programming (OOP)",
            "docs": [
                {
                    "id": "class_definition",
                    "title": "Class Definition",
                    "description": "Defines a blueprint for creating objects in Python, encapsulating data and behavior within a single unit.",
                    "code": "\n# Syntax\nclass ClassName:\n    def __init__(self, parameter1, parameter2):\n        # Constructor\n        # Define attributes\n    \n    def method_name(self, parameter3):\n        # Method definition\n\n# Example\nclass Dog:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def bark(self):\n        print('Woof!')\n"
                },
                {
                    "id": "class_instantiation",
                    "title": "Class Instantiation",
                    "description": "Creates instances of a class, representing specific objects with unique attributes and behaviors in Python.",
                    "code": "\n# Syntax\nobject_name = ClassName(argument1, argument2)\n\n# Example\ndog1 = Dog('Buddy', 3)\ndog2 = Dog('Max', 5)\n"
                },                                
                {
                    "id": "inheritance_polymorphism",
                    "title": "Inheritance and Polymorphism",
                    "description": "Allows a class to inherit attributes and methods from another class, promoting code reuse, and supports polymorphism in Python.",
                    "code": "\n# Syntax\n# Example\n# Inheritance: class SubClass(ParentClass)\n# Polymorphism: overriding methods, using interfaces, etc.\n"
                },
                {
                    "id": "encapsulation",
                    "title": "Encapsulation",
                    "description": "Bundles data and methods that operate on the data within a single unit, restricting access to the internal details of an object in Python.",
                    "code": "\n# Syntax\n# Example\n# Encapsulation: private attributes, getters and setters, property decorators, etc.\n"
                },                                
                {
                    "id": "abstract_classes_interfaces",
                    "title": "Abstract Classes and Interfaces",
                    "description": "Defines abstract classes with abstract methods, providing a blueprint for concrete classes to implement, and interfaces in Python.",
                    "code": "\n# Syntax\nfrom abc import ABC, abstractmethod\n\nclass AbstractClass(ABC):\n    @abstractmethod\n    def abstract_method(self):\n        pass\n\n# Example\n# Abstract Classes: defining abstract methods\n# Interfaces: using abstract base classes (ABC)\n"
                },
                {
                    "id": "class_methods_static_methods",
                    "title": "Class Methods and Static Methods",
                    "description": "Defines methods that are bound to the class rather than an instance, allowing for class-level behavior and utility methods in Python.",
                    "code": "\n# Syntax\nclass ClassName:\n    @classmethod\n    def class_method(cls, parameter1, parameter2):\n        # Class method definition\n\n    @staticmethod\n    def static_method(parameter3):\n        # Static method definition\n\n# Example\n# Class Methods: accessing class-level variables\n# Static Methods: utility functions independent of class instances\n"
                }                                
            ]
        },
        {
            "id": "advanced_topics",
            "title": "Advanced Topics",
            "docs": [
                {
                    "id": "decorators",
                    "title": "Decorators",
                    "description": "Decorators are a powerful and flexible tool in Python, allowing the modification of functions or methods at the time they are defined. They are often used for tasks such as logging, timing, or access control.",
                    "code": "def my_decorator(func):\n    def wrapper():\n        print('Something is happening before the function is called.')\n        func()\n        print('Something is happening after the function is called.')\n    return wrapper\n\n@my_decorator\n    def say_hello():\n        print('Hello!')\n\nsay_hello()"
                },
                {
                    "id": "generators_and_iterators",
                    "title": "Generators and Iterators",
                    "description": "Generators provide a convenient way to implement simple iterators. They allow you to iterate over a potentially large set of data without creating the entire set in memory.",
                    "code": "def countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n\nfor i in countdown(5):\n    print(i)"
                },
                {
                    "id": "concurrency_parallelism",
                    "title": "Concurrency and Parallelism",
                    "description": "Enables the execution of multiple tasks simultaneously, enhancing program performance by dividing workloads in Python.",
                    "code": "\n# Concurrency: Concurrent execution of multiple tasks without necessarily running them in parallel.\n# Parallelism: Simultaneous execution of multiple tasks using multiple processors or cores.\n\n# Example\n# Concurrency: Using threads or asyncio\n# Parallelism: Using multiprocessing\n"
                },                
                {
                    "id": "metaclasses",
                    "title": "Metaclasses",
                    "description": "Metaclasses are a class of classes. They define how classes themselves are created and behave. Metaclasses can be a powerful tool for code customization and validation.",
                    "code": "class MyMeta(type):\n    def __new__(cls, name, bases, dct):\n        # Modify or validate class attributes before class creation\n        return super().__new__(cls, name, bases, dct)\n\nclass MyClass(metaclass=MyMeta):\n    pass"
                },
                {
                    "id": "descriptors",
                    "title": "Descriptors",
                    "description": "Descriptors allow you to customize attribute access in classes. They are used to define how getting, setting, and deleting of an attribute should behave.",
                    "code": "class DescriptorExample:\n    def __get__(self, instance, owner):\n        print('Getting the attribute')\n        return instance._value\n\n    def __set__(self, instance, value):\n        print('Setting the attribute')\n        instance._value = value\n\nclass MyClass:\n    descriptor = DescriptorExample()\n\nobj = MyClass()\nobj.descriptor = 42  # Calls the __set__ method\nprint(obj.descriptor)  # Calls the __get__ method"
                },
                {
                    "id": "context_managers",
                    "title": "Context Managers",
                    "description": "Context managers allow you to allocate and release resources precisely when you want to. They are often used with the 'with' statement.",
                    "code": "class MyContextManager:\n    def __enter__(self):\n        print('Entering the context')\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print('Exiting the context')\n\nwith MyContextManager():\n    print('Inside the context')"
                }
            ]
        },
        {
            "id": "type_safety",
            "title": "Type safety",
            "docs": [
                {
                    "id": "type_hints",
                    "title": "Type Hints",
                    "description": "Type hints provide a way to indicate the expected types of values within your Python code. They can be used for function arguments, return values, and variable annotations to enhance code readability and enable static type checking.",
                    "code": "# Function with type hints\n\ndef greet(name: str) -> str:\n    return f'Hello, {name}!'\n\n# Type hints for variables\n\ndef calculate_sum(a: int, b: int) -> int:\n    return a + b"
                },
                {
                    "id": "static_type_checking",
                    "title": "Static Type Checking with MyPy",
                    "description": "MyPy is a third-party tool that performs static type checking for Python code. It helps catch type-related errors early in development, providing a way to enforce type safety in your code.",
                    "code": "# Example mypy command\n# Install mypy using pip: pip install mypy\n# Run mypy on a Python file: mypy filename.py"
                },
                {
                    "id": "type_aliases",
                    "title": "Type Aliases",
                    "description": "Type aliases allow you to create a shorthand name for complex types, improving code readability. They are particularly useful when dealing with long and intricate type annotations.",
                    "code": "# Type alias for a complex data structure\n\nfrom typing import List, Tuple\n\nCoordinates = Tuple[float, float]\n\ndef move_to(coordinate: Coordinates) -> None:\n    pass"
                },
                {
                    "id": "union_optional_types",
                    "title": "Union and Optional Types",
                    "description": "Union types allow a variable or parameter to accept values of multiple types. Optional types indicate that a variable can be of a certain type or 'None'. These concepts enhance flexibility while maintaining type safety.",
                    "code": "# Union type example\n\nfrom typing import Union, Optional\n\ndef square_root(number: Union[int, float]) -> float:\n    return number ** 0.5\n\n# Optional type example\n\ndef find_element(my_list: List[int], target: Optional[int] = None) -> int:\n    return my_list.index(target) if target is not None else -1"
                },
                {
                    "id": "type_checking_unit_tests",
                    "title": "Type Checking in Unit Tests",
                    "description": "Incorporating type checking into unit tests ensures that your functions and methods adhere to the specified types. This helps catch potential type-related issues during the testing phase.",
                    "code": "# Example unit test with type checking\n\nfrom typing import List\nimport unittest\n\nclass MyTest(unittest.TestCase):\n    def test_calculate_sum(self):\n        result: int = calculate_sum(3, 5)\n        self.assertEqual(result, 8)"
                }
            ]
        },
        {
            "id": "libraries_and_frameworks",
            "title": "Libraries and Frameworks",
            "docs": [
                {
                    "id": "python_standard_library",
                    "title": "Python Standard Library",
                    "description": "Overview of commonly used modules in the Python standard library. Examples with modules like os, sys, datetime, and more. Importance of knowing the standard library for efficient programming.",
                    "code": "import os\nimport sys\nimport datetime\n\n# Using the os module\ncurrent_directory = os.getcwd()\n\n# Using the sys module\nprint(sys.version)\n\n# Using the datetime module\ncurrent_time = datetime.datetime.now()"
                },
                {
                    "id": "popular_frameworks",
                    "title": "Popular Frameworks",
                    "description": "Introduction to frameworks like Django, Flask, and others. Discussing their use cases, advantages, and when to choose one over the other. Understanding the MVC architecture.",
                    "code": "# Example using Flask\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, Flask!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
                },
                {
                    "id": "data_science_libraries",
                    "title": "Data Science Libraries",
                    "description": "Brief overview of libraries like NumPy, Pandas, and Matplotlib. Common operations in data science using Python and the importance of data visualization.",
                    "code": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Using NumPy for numerical operations\narray = np.array([1, 2, 3, 4, 5])\n\n# Using Pandas for data manipulation\ndf = pd.DataFrame({'Column1': [1, 2, 3], 'Column2': ['A', 'B', 'C']})\n\n# Using Matplotlib for data visualization\nplt.plot([1, 2, 3, 4, 5], [2, 4, 6, 8, 10])\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.show()"
                }
            ]
        },
        {
            "id": "async",
            "title": "Asynchronous Programming",
            "docs": [
                {
                    "id": "async",
                    "title": "Asynchronous Programming",
                    "description": "Facilitates the execution of non-blocking code, allowing tasks to run concurrently and enhancing the efficiency of I/O-bound operations in Python.",
                    "code": "\n# Syntax\nimport asyncio\n\nasync def async_function():\n    # Asynchronous function definition\n    \n# Example\n# Using asyncio library for asynchronous programming\n"
                },
                {
                    "id": "coroutines",
                    "title": "Coroutines",
                    "description": "Special types of functions used in asynchronous programming that allow suspending and resuming their execution, enhancing concurrency in Python.",
                    "code": "\n# Syntax\nimport asyncio\n\nasync def my_coroutine():\n    # Coroutine definition\n    \n# Example\n# Using asyncio library for coroutines\n"
                },
                {
                    "id": "event_loop",
                    "title": "Event Loop",
                    "description": "Manages and coordinates the execution of asynchronous tasks, ensuring proper scheduling and handling of events in Python.",
                    "code": "\n# Syntax\nimport asyncio\nloop = asyncio.get_event_loop()\n\n# Example\n# Setting up and running the event loop\n"
                },
                {
                    "id": "await",
                    "title": "await Keyword",
                    "description": "Suspends the execution of an asynchronous coroutine until the awaited task is complete, allowing other tasks to run in the meantime in Python.",
                    "code": "\n# Syntax\nresult = await some_async_function()\n\n# Example\n# Using the await keyword in an asynchronous function\n"
                },
                {
                    "id": "asyncio_tasks",
                    "title": "Asyncio Tasks",
                    "description": "Represents units of work in an event loop, allowing the execution of multiple asynchronous tasks concurrently in Python.",
                    "code": "\n# Syntax\nimport asyncio\n\nasync def main():\n    task1 = asyncio.create_task(coroutine1())\n    task2 = asyncio.create_task(coroutine2())\n    \n    await asyncio.gather(task1, task2)\n\n# Example\n# Creating and executing asyncio tasks\n"
                },
                {
                    "id": "asyncio_gather",
                    "title": "Asyncio Gather",
                    "description": "Collects and waits for the results of multiple asynchronous tasks, enabling efficient coordination and synchronization in Python.",
                    "code": "\n# Syntax\nawait asyncio.gather(task1, task2, task3)\n\n# Example\n# Gathering results from multiple asyncio tasks\n"
                }                               
            ]
        }
    ]
}